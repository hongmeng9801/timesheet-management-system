name: 微信小程序自动化部署

on:
  push:
    branches:
      - main      # 主分支推送时部署正式版
      - develop   # 开发分支推送时部署开发版
  pull_request:
    branches:
      - main      # PR到主分支时生成预览
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - preview
          - release
      preview_only:
        description: '仅生成预览二维码'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'miniprogram/package.json'
        
    - name: 安装依赖
      working-directory: ./miniprogram
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi
        
    - name: 代码检查
      working-directory: ./miniprogram
      run: |
        # 检查必要文件是否存在
        if [ ! -f "app.json" ]; then
          echo "❌ app.json 文件不存在"
          exit 1
        fi
        
        if [ ! -f "project.config.json" ]; then
          echo "❌ project.config.json 文件不存在"
          exit 1
        fi
        
        # 检查AppID配置
        appid=$(cat project.config.json | grep -o '"appid"[^,]*' | cut -d'"' -f4)
        if [ "$appid" = "touristappid" ] || [ -z "$appid" ]; then
          echo "❌ 请先配置正确的AppID"
          exit 1
        fi
        
        echo "✅ 代码检查通过"
        echo "   AppID: $appid"
        
    - name: 确定部署环境
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "preview_only=${{ github.event.inputs.preview_only }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=release" >> $GITHUB_OUTPUT
          echo "preview_only=false" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "preview_only=false" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "environment=preview" >> $GITHUB_OUTPUT
          echo "preview_only=true" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "preview_only=true" >> $GITHUB_OUTPUT
        fi
        
    - name: 环境变量替换
      working-directory: ./miniprogram
      run: |
        ENV=${{ steps.env.outputs.environment }}
        echo "🔧 配置 $ENV 环境变量"
        
        # 根据环境替换配置文件中的变量
        if [ -f "config/app-config.js" ]; then
          case $ENV in
            "release")
              sed -i 's/{{H5_DOMAIN}}/https:\/\/your-domain.com/g' config/app-config.js
              sed -i 's/{{API_DOMAIN}}/https:\/\/api.your-domain.com/g' config/app-config.js
              ;;
            "preview")
              sed -i 's/{{H5_DOMAIN}}/https:\/\/test.your-domain.com/g' config/app-config.js
              sed -i 's/{{API_DOMAIN}}/https:\/\/api-test.your-domain.com/g' config/app-config.js
              ;;
            "dev")
              sed -i 's/{{H5_DOMAIN}}/http:\/\/localhost:5173/g' config/app-config.js
              sed -i 's/{{API_DOMAIN}}/http:\/\/localhost:3000/g' config/app-config.js
              ;;
          esac
          echo "✅ 环境变量替换完成"
        fi
        
    - name: 构建项目
      working-directory: ./miniprogram
      run: |
        echo "🔨 构建项目..."
        
        # 更新版本号
        ENV=${{ steps.env.outputs.environment }}
        VERSION="1.0.0"
        case $ENV in
          "release")
            VERSION="1.0.0"
            ;;
          "preview")
            VERSION="1.0.0-preview.$(date +%Y%m%d%H%M)"
            ;;
          "dev")
            VERSION="1.0.0-dev.$(date +%Y%m%d%H%M)"
            ;;
        esac
        
        # 更新package.json版本号
        if [ -f "package.json" ]; then
          npm version $VERSION --no-git-tag-version
          echo "   版本号: $VERSION"
        fi
        
        echo "✅ 项目构建完成"
        
    - name: 安装微信开发者工具
      run: |
        echo "📦 安装微信开发者工具CLI..."
        
        # 下载微信开发者工具Linux版本
        wget -O wechat_devtools.tar.gz "https://dldir1.qq.com/WechatWebDev/release/be1ec64cf6184148c2c7efb5de8c8e5a/wechat_devtools_linux.tar.gz"
        
        # 解压
        tar -xzf wechat_devtools.tar.gz
        
        # 安装依赖
        sudo apt-get update
        sudo apt-get install -y libnss3 libatk-bridge2.0-0 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2
        
        # 设置权限
        chmod +x wechat_devtools/bin/wxdev
        
        # 创建符号链接
        sudo ln -sf $(pwd)/wechat_devtools/bin/wxdev /usr/local/bin/wxdev
        
        echo "✅ 微信开发者工具安装完成"
        
    - name: 配置微信开发者工具
      run: |
        echo "⚙️ 配置微信开发者工具..."
        
        # 启动工具（后台运行）
        wxdev --version
        
        # 等待工具启动
        sleep 5
        
        echo "✅ 微信开发者工具配置完成"
        
    - name: 部署小程序
      working-directory: ./miniprogram
      env:
        MINIPROGRAM_APPID: ${{ secrets.MINIPROGRAM_APPID }}
        MINIPROGRAM_PRIVATE_KEY: ${{ secrets.MINIPROGRAM_PRIVATE_KEY }}
      run: |
        ENV=${{ steps.env.outputs.environment }}
        PREVIEW_ONLY=${{ steps.env.outputs.preview_only }}
        
        echo "🚀 开始部署 $ENV 环境..."
        
        # 设置项目配置
        if [ ! -z "$MINIPROGRAM_APPID" ]; then
          # 更新AppID
          sed -i "s/\"appid\": \"[^\"]*\"/\"appid\": \"$MINIPROGRAM_APPID\"/g" project.config.json
          echo "   AppID已更新"
        fi
        
        # 执行部署
        if [ "$PREVIEW_ONLY" = "true" ]; then
          echo "📱 生成预览二维码..."
          
          # 生成预览
          wxdev preview \
            --project $(pwd) \
            --version "1.0.0-preview" \
            --desc "GitHub Actions 自动预览" \
            --qr-output "./qrcode.jpg" || true
            
          # 检查二维码是否生成成功
          if [ -f "qrcode.jpg" ]; then
            echo "✅ 预览二维码生成成功"
            
            # 上传二维码到GitHub Artifacts
            echo "📤 上传预览二维码..."
          else
            echo "⚠️ 预览二维码生成失败，但不影响流程"
          fi
        else
          echo "📤 上传代码到微信后台..."
          
          # 上传代码
          wxdev upload \
            --project $(pwd) \
            --version "1.0.0" \
            --desc "GitHub Actions 自动部署 - $ENV" || true
            
          echo "✅ 代码上传完成"
        fi
        
    - name: 上传预览二维码
      if: steps.env.outputs.preview_only == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: miniprogram-qrcode-${{ steps.env.outputs.environment }}
        path: miniprogram/qrcode.jpg
        retention-days: 7
        
    - name: 部署结果通知
      if: always()
      run: |
        ENV=${{ steps.env.outputs.environment }}
        PREVIEW_ONLY=${{ steps.env.outputs.preview_only }}
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "🎉 $ENV 环境部署成功！"
          
          if [ "$PREVIEW_ONLY" = "true" ]; then
            echo "📱 预览二维码已生成，请在 Artifacts 中下载"
          else
            echo "📋 后续操作提醒："
            echo "1. 登录微信公众平台"
            echo "2. 进入版本管理页面"
            echo "3. 查看上传的版本"
            
            if [ "$ENV" = "release" ]; then
              echo "4. 设为体验版并提交审核"
              echo "5. 审核通过后发布"
            fi
          fi
        else
          echo "❌ $ENV 环境部署失败！"
          echo "请检查日志并修复问题"
        fi
        
  # 代码质量检查任务
  quality-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 代码规范检查
      working-directory: ./miniprogram
      run: |
        echo "🔍 代码规范检查..."
        
        # 检查文件结构
        required_files=("app.json" "app.js" "project.config.json")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ 缺少必要文件: $file"
            exit 1
          fi
        done
        
        # 检查JSON文件格式
        json_files=("app.json" "project.config.json" "sitemap.json")
        for file in "${json_files[@]}"; do
          if [ -f "$file" ]; then
            if ! python3 -m json.tool "$file" > /dev/null 2>&1; then
              echo "❌ JSON格式错误: $file"
              exit 1
            fi
          fi
        done
        
        echo "✅ 代码规范检查通过"
        
    - name: 安全检查
      working-directory: ./miniprogram
      run: |
        echo "🔒 安全检查..."
        
        # 检查是否包含敏感信息
        if grep -r "password\|secret\|key" --include="*.js" --include="*.json" . | grep -v "// " | grep -v "\*" ; then
          echo "⚠️ 发现可能的敏感信息，请检查"
        fi
        
        # 检查AppID配置
        appid=$(cat project.config.json | grep -o '"appid"[^,]*' | cut -d'"' -f4)
        if [ "$appid" = "touristappid" ]; then
          echo "⚠️ 使用的是测试AppID，请确保这是预期的"
        fi
        
        echo "✅ 安全检查完成"